@model Forno.Models.Product

@{
    ViewBag.Title = "Edit Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit Product</h2>

@using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ProductID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, new { @class = "form-label" })
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImageUrl, new { @class = "form-label" })
        @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, new { @class = "form-label" })
        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", type = "number", step = "0.01" } })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DeliveryTime, new { @class = "form-label" })
        @Html.EditorFor(model => model.DeliveryTime, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.DeliveryTime, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.Label("Available Ingredients", new { @class = "control-label" })
        @Html.ListBox("SelectedIngredientIDs", ViewBag.AllIngredients as SelectList, new { @class = "form-control" })
    </div>

    <div class="mb-3">
        <button type="button" id="btnAddIngredient" class="btn btn-success">Add Ingredient</button>
    </div>

    <div class="mb-3">
        <ul id="selectedIngredients" class="list-group">
            <!-- Ingredients will be listed here -->
        </ul>
    </div>

    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-secondary" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
        $(document).ready(function () {
    // Inizializza la lista degli ingredienti selezionati quando si carica la pagina.
    var selectedIngredientIDs = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.SelectedIngredientIDs));
    var allIngredients = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllIngredients));

    // Funzione per aggiungere un ingrediente alla lista visiva e un input nascosto al form.
    function addIngredientToList(value, text) {
        // Verifica se l'ingrediente è già stato aggiunto per evitare duplicati.
        if ($('#selectedIngredients input[value="' + value + '"]').length == 0) {
            var listItem = $('<li>')
                .text(text)
                .attr('data-id', value);

            var removeBtn = $('<button>')
                .text('Remove')
                .addClass('btn btn-danger btn-sm')
                .click(function () {
                    $(this).parent().remove();
                    $('input[name="SelectedIngredientIDs"][value="' + value + '"]').remove();
                });

            listItem.append(removeBtn);

            var hiddenInput = $('<input>')
                .attr({
                    type: 'hidden',
                    name: 'SelectedIngredientIDs',
                    value: value
                });

            $('#selectedIngredients').append(listItem);
            $('#selectedIngredients').append(hiddenInput);
        }
    }

    // Carica gli ingredienti già selezionati quando si carica la pagina.
    $.each(selectedIngredientIDs, function(i, id) {
        var ingredient = allIngredients.find(x => x.Value == id);
        if (ingredient) {
            addIngredientToList(ingredient.Value, ingredient.Text);
        }
    });

    // Gestore per il click del bottone 'Add Ingredient'.
    $('#btnAddIngredient').click(function () {
        $('#AvailableIngredients option:selected').each(function () {
            addIngredientToList($(this).val(), $(this).text());
        });
    });
});
</script>
}
