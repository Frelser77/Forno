<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title - Forno</title>
    <!-- Bootstrap CSS 5.3.2 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    @Styles.Render("~/Content/css")
</head>
<body class="poistion-relative">

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            @Html.ActionLink("Forno", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">@Html.ActionLink("Home", "Index", "Products", new { area = "" }, new { @class = "nav-link" })</li>
                    @if (User.IsInRole("Admin"))
                    {
                        <li class="nav-item">@Html.ActionLink("Report", "DailyReport", "Orderrs", new { area = "" }, new { @class = "nav-link" })</li>
                    }
                    </ul>
                <ul class="navbar-nav">
                    @if (User.Identity.IsAuthenticated)
                    {

                        <li>
                            <a href="@Url.Action("GetCart", "Orderrs")" class="nav-link">Carrello <span id="cart-item-count">0</span></a>
                        </li>

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Benvenuto @User.Identity.Name
                            </a>

                            <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                                @{
                                    var userId = "";
                                    if (HttpContext.Current.User.Identity is FormsIdentity identity)
                                    {
                                        FormsAuthenticationTicket ticket = identity.Ticket;
                                        string userData = ticket.UserData;
                                        // Supponendo che l'ID utente sia il primo elemento prima del separatore '|'
                                        userId = userData.Split('|')[0];
                                    }
                                }

                                <a class="dropdown-item" href="@Url.Action("Details", "AppUsers", new { id = userId })">Profilo</a>
                                <a class="dropdown-item" href="@Url.Action("Index", "Orderrs")">I Miei Ordini</a>


                                <a class="dropdown-item" href="@Url.Action("Logout", "Account")">Logout</a>

                                @if (User.IsInRole("Admin"))
                                {
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="@Url.Action("Index", "Orderrs")">Ordini</a>
                                    <a class="dropdown-item" href="@Url.Action("Index", "Ingredients")">Ingredienti</a>
                                }

                            </div>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            @Html.ActionLink("Login", "Login", "Account", new { area = "" }, new { @class = "nav-link" })
                        </li>
                        <li class="nav-item">
                            @Html.ActionLink("Registrati", "Create", "AppUsers", new { area = "" }, new { @class = "nav-link" })
                        </li>
                    }
                </ul>

            </div>
        </div>
    </nav>

    <div class="container body-content">
        @RenderBody()

    </div>
    <footer class="footer mt-auto py-3 bg-dark mt-2">
        <div class="container">
            <span class="text-muted">&copy; @DateTime.Now.Year - Forno</span>
        </div>
    </footer>
    @Scripts.Render("~/bundles/jquery")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    @RenderSection("scripts", required: false)
    <script type="text/javascript">
        // Estensione metodi validator per supportare la formattazione locale dei numeri
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        };

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        };

        // Gestione del caricamento del DOM
        document.addEventListener('DOMContentLoaded', function () {
            updateCartCount();
            // Inizializzazione del modale di Bootstrap 5
            var customizeModalSelector = '#customizeProductModal';
            var customizeModal = new bootstrap.Modal(document.querySelector(customizeModalSelector), {
                keyboard: false
            });

            // Funzione per aggiornare il conteggio degli articoli nel carrello
            function updateCartCount() {
                var cartItemCountUrl = '/Orderrs/CartItemCount';
                fetch(cartItemCountUrl)
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('cart-item-count').textContent = data.cartItemCount;
                    })
                    .catch(error => {
                        console.error('Errore durante l\'aggiornamento del conteggio del carrello:', error);
                    });
            }

            // Funzione per aggiungere al carrello
            function addToCart(productId, quantity, selectedIngredients, token) {
                var formData = new FormData();
                formData.append('productId', productId);
                formData.append('quantity', quantity);
                selectedIngredients.forEach(function (ingredient) {
                    formData.append('selectedIngredients', ingredient);
                });
                formData.append('__RequestVerificationToken', token);

                fetch('/Orderrs/AddToCart', {
                    method: 'POST',
                    body: formData // Invia come FormData invece di JSON.stringify
                })
                    .then(response => {
                        if (!response.ok) throw new Error(response.statusText);
                        return response.json();
                    })
                    .then(result => {
                        if (result.success) {
                            toastr.success('Prodotto aggiunto al carrello.');
                            updateCartCount();
                        } else {
                            toastr.error('Errore durante l\'aggiunta al carrello: ' + result.message);
                        }
                    })
                    .catch(error => {
                        console.error('Errore durante l\'aggiunta al carrello:', error);
                        toastr.error('Errore durante l\'aggiunta al carrello.');
                    });

                customizeModal.hide();
            }

            // Listener per il submit del modale di personalizzazione
            document.querySelector(customizeModalSelector).addEventListener('submit', function (event) {
                event.preventDefault();
                var form = event.target.closest('form');
                var productId = form.getAttribute('data-product-id');
                var quantity = parseInt(form.quantity.value);
                var selectedIngredients = Array.from(form.querySelectorAll('input[name="selectedIngredients"]:checked'))
                    .map(input => parseInt(input.value));
                var token = form.querySelector('input[name="__RequestVerificationToken"]').value;

                addToCart(productId, quantity, selectedIngredients, token);
            });

            // Listener per l'apertura del modale di personalizzazione
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    var productId = this.getAttribute('data-product-id');
                    document.querySelector(customizeModalSelector + ' .modal-title').textContent = 'Personalizza ' + this.getAttribute('data-product-name');

                    fetch('/Products/Details/' + productId, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    })
                        .then(response => {
                            if (!response.ok) throw new Error('Network response was not ok');
                            return response.text();
                        })
                        .then(html => {
                            document.querySelector(customizeModalSelector + ' .modal-body').innerHTML = html;
                            customizeModal.show();
                        })
                        .catch(error => {
                            console.error('Failed to fetch product details:', error);
                        });
                });
            });
        });

        function showToastSuccess(message) {
            toastr.success(message);
        }

        function showToastError(message) {
            toastr.error(message);
        }
    </script>
    <script type="text/javascript">
    @if (TempData["success"] != null)
    {
        <text>toastr.success('@TempData["success"]');</text>
    }
    @if (TempData["error"] != null)
    {
        <text>toastr.error('@TempData["error"]');</text>
    }
    </script>

</body>
</html>
